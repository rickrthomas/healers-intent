{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _hammerjs = require('hammerjs');\n\nvar _hammerjs2 = _interopRequireDefault(_hammerjs);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _SimpleCard = require('./SimpleCard');\n\nvar _SimpleCard2 = _interopRequireDefault(_SimpleCard);\n\nvar _utils = require('./utils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar DraggableCard = function (_Component) {\n  _inherits(DraggableCard, _Component);\n\n  function DraggableCard(props) {\n    _classCallCheck(this, DraggableCard);\n\n    var _this = _possibleConstructorReturn(this, (DraggableCard.__proto__ || Object.getPrototypeOf(DraggableCard)).call(this, props));\n\n    _this.state = {\n      x: 0,\n      y: 0,\n      initialPosition: {\n        x: 0,\n        y: 0\n      },\n      startPosition: {\n        x: 0,\n        y: 0\n      },\n      animation: null,\n      pristine: true\n    };\n    _this.resetPosition = _this.resetPosition.bind(_this);\n    _this.handlePan = _this.handlePan.bind(_this);\n    return _this;\n  }\n\n  _createClass(DraggableCard, [{\n    key: 'resetPosition',\n    value: function resetPosition() {\n      var _props$containerSize = this.props.containerSize,\n          x = _props$containerSize.x,\n          y = _props$containerSize.y;\n\n      var card = _reactDom2.default.findDOMNode(this);\n\n      var initialPosition = {\n        x: Math.round((x - card.offsetWidth) / 2),\n        y: Math.round((y - card.offsetHeight) / 2)\n      };\n      this.setState({\n        x: initialPosition.x,\n        y: initialPosition.y,\n        initialPosition: initialPosition,\n        startPosition: {\n          x: 0,\n          y: 0\n        }\n      });\n    }\n  }, {\n    key: 'panstart',\n    value: function panstart() {\n      var _state = this.state,\n          x = _state.x,\n          y = _state.y;\n      this.setState({\n        animation: false,\n        startPosition: {\n          x: x,\n          y: y\n        },\n        pristine: false\n      });\n    }\n  }, {\n    key: 'panend',\n    value: function panend(ev) {\n      var _this2 = this;\n\n      var screen = this.props.containerSize;\n\n      var card = _reactDom2.default.findDOMNode(this);\n\n      var getDirection = function getDirection() {\n        switch (true) {\n          case _this2.state.x < -50:\n            return 'Left';\n\n          case _this2.state.x + (card.offsetWidth - 50) > screen.x:\n            return 'Right';\n\n          case _this2.state.y < -50:\n            return 'Top';\n\n          case _this2.state.y + (card.offsetHeight - 50) > screen.y:\n            return 'Bottom';\n\n          default:\n            return false;\n        }\n      };\n\n      var direction = getDirection();\n\n      if (this.props['onSwipe' + direction]) {\n        this.props['onSwipe' + direction]();\n        this.props['onOutScreen' + direction](this.props.index);\n      } else {\n        this.resetPosition();\n        this.setState({\n          animation: true\n        });\n      }\n    }\n  }, {\n    key: 'panmove',\n    value: function panmove(ev) {\n      this.setState(this.calculatePosition(ev.deltaX, ev.deltaY));\n    }\n  }, {\n    key: 'pancancel',\n    value: function pancancel(ev) {\n      console.log(ev.type);\n    }\n  }, {\n    key: 'handlePan',\n    value: function handlePan(ev) {\n      ev.preventDefault();\n      this[ev.type](ev);\n      return false;\n    }\n  }, {\n    key: 'handleSwipe',\n    value: function handleSwipe(ev) {\n      console.log(ev.type);\n    }\n  }, {\n    key: 'calculatePosition',\n    value: function calculatePosition(deltaX, deltaY) {\n      var _state$initialPositio = this.state.initialPosition,\n          x = _state$initialPositio.x,\n          y = _state$initialPositio.y;\n      return {\n        x: x + deltaX,\n        y: y + deltaY\n      };\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.hammer = new _hammerjs2.default.Manager(_reactDom2.default.findDOMNode(this));\n      this.hammer.add(new _hammerjs2.default.Pan({\n        threshold: 2\n      }));\n      this.hammer.on('panstart panend pancancel panmove', this.handlePan);\n      this.hammer.on('swipestart swipeend swipecancel swipemove', this.handleSwipe);\n      this.resetPosition();\n      window.addEventListener('resize', this.resetPosition);\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      if (this.hammer) {\n        this.hammer.stop();\n        this.hammer.destroy();\n        this.hammer = null;\n      }\n\n      window.removeEventListener('resize', this.resetPosition);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _state2 = this.state,\n          x = _state2.x,\n          y = _state2.y,\n          animation = _state2.animation,\n          pristine = _state2.pristine;\n      var style = (0, _utils.translate3d)(x, y);\n      return _react2.default.createElement(_SimpleCard2.default, _extends({}, this.props, {\n        style: style,\n        className: animation ? 'animate' : pristine ? 'inactive' : ''\n      }));\n    }\n  }]);\n\n  return DraggableCard;\n}(_react.Component);\n\nexports.default = DraggableCard;","map":null,"metadata":{},"sourceType":"script"}